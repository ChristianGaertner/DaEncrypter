package io.github.christiangaertner.daencrypter.gui;

import io.github.christiangaertner.daencrypter.DaEncrypter;

/**
 *
 * @author Christian
 */
public class UIMain extends javax.swing.JFrame {

    private boolean decrypt = false;

    /**
     * Creates new form UIMain
     */
    public UIMain() {
        initComponents();
    }

    public void updateUI() {
        
        privatekey.setEnabled(!DaEncrypter.symmetric());
        
        if (input.getText().isEmpty()) {
            output.setText("");
            return;
        }
        
        if (key.getText().isEmpty()) {
            return;
        }
        
        String outputTxt;

        if (decrypt) {
            outputTxt = DaEncrypter.decrypt(input.getText(), (String) cipher.getSelectedItem());
        } else {
            outputTxt = DaEncrypter.encrypt(input.getText(), (String) cipher.getSelectedItem());
        }

        output.setText(outputTxt);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        output = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        input = new javax.swing.JTextArea();
        cipher = new javax.swing.JComboBox();
        UIdecrypt = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        privatekey = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        output.setEditable(false);
        output.setColumns(20);
        output.setRows(5);
        jScrollPane2.setViewportView(output);

        input.setColumns(20);
        input.setRows(5);
        input.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textChanged(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textChanged(evt);
            }
        });
        jScrollPane1.setViewportView(input);

        cipher.setModel(new javax.swing.DefaultComboBoxModel(DaEncrypter.getAlgorithms()));
        cipher.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cipherChanged(evt);
            }
        });

        UIdecrypt.setText("Decrypt");
        UIdecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crypterToogled(evt);
            }
        });

        jLabel1.setText("Public Key:");

        key.setText("4");
        key.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                keyChanged(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                keyChanged(evt);
            }
        });

        jLabel2.setText("Private Key:");

        privatekey.setText("4");
        privatekey.setEnabled(!DaEncrypter.symmetric());
        privatekey.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                privatekeyChanged(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                privatekeyChanged1(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(cipher, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 108, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(layout.createSequentialGroup()
                                .add(6, 6, 6)
                                .add(UIdecrypt, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(privatekey, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                            .add(key))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cipher, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1)
                    .add(key, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(privatekey, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(UIdecrypt))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 12, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                    .add(jScrollPane2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void textChanged(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textChanged
        updateUI();
    }//GEN-LAST:event_textChanged

    private void crypterToogled(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crypterToogled
        this.decrypt = UIdecrypt.isSelected();
        updateUI();
    }//GEN-LAST:event_crypterToogled

    private void cipherChanged(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cipherChanged
        updateUI();
    }//GEN-LAST:event_cipherChanged

    private void keyChanged(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyChanged
        if (key.getText().isEmpty()) {
            return;
        }

        DaEncrypter.setKey(key.getText());
        updateUI();
    }//GEN-LAST:event_keyChanged

    private void privatekeyChanged(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_privatekeyChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_privatekeyChanged

    private void privatekeyChanged1(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_privatekeyChanged1
        // TODO add your handling code here:
    }//GEN-LAST:event_privatekeyChanged1

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox UIdecrypt;
    private javax.swing.JComboBox cipher;
    private javax.swing.JTextArea input;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField key;
    private javax.swing.JTextArea output;
    private javax.swing.JTextField privatekey;
    // End of variables declaration//GEN-END:variables
}
